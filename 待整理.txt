记下：
1、oa系统ie登陆
2、nrm 切换源；nvm 切换node版本 
3、更改系统 host 访问域名/后台接口，原因：cookie绑在域名下面了（登陆)。备注：也可以Nginx代理访问
4、vue添加实例属性/方法：
①prototype
②use => install(vue) => prototype;
5、全局事件监听$on，需要注意：当前页面自定义事件不可重名；不同页面之间没关系；组件化比较细的情况下需要注意；
6、vue的sync修饰符，虚拟双向绑定，同步更新数据；
7、滚动条样式：::-webkit-scrollbar width: 8px;height: 8px;::-webkit-scrollbar-thumb background-color: #62a0f8;
8、混入 (mixins) 是复用vue组件功能的一种方式。组件优先级高于混入；
9、this.$el 当前组件的根节点/Vue 实例使用的根 DOM 元素
10、以后开发采用严格模式；

12、代理 解决 跨域
proxyTable: {
      '/api': {
        target: 'http://192.168.16.95:8080', // 接口的域名
        // secure: false,  // 如果是https接口，需要配置这个参数
        changeOrigin: true, // 如果接口跨域，需要进行这个参数配置
        pathRewrite: {
          '^/api': ''
        }
      }
    },
13、iOS的cookie后台接收不到，可能是他配置的路径不对。
备注：安全性 httponly 前端无法通过js取cookie值。
14、ie不支持 es6 垫片babel-polyfill 顶部引用；入口配置app: ['babel-polyfill', './src/main.js'],；
15、移动端适配记得①低版本确认4.3；②iOS x 打底会有问题（app解决：增加一定像素安全区域）要不就自行处理；
16、改host地址：C:\Windows\System32\drivers\etc 就是域名访问对应IP地址
①VPN有访问host配置的IP地址的权限；
②host配置，域名访问正确的IP地址；
17、加密显示（脱敏）
getEncryp(v) {
        if (!v) {
          return '';
        }
        const arr = v.split('');
        let str = '';
        arr.forEach((item, index) => {
          if (index > 2 && index < 14) {
            str += '*';
            return false;
          }
          str += item;
        });
        return v;
      },
18、上线package.json固定版本号。
19、position定位，需要设置z-index才会生效；
20、vue 导入图片 icon: require('../../../images/common/icon_radio.png'),
21、vue 组件 props object类型的默认值设置；
info: {
      type: Object,
      default() {
        return {
          doctorAdvice: '',
        };
      },
    },
22、vue 设置title
router.beforeEach((to, from, next) => {
  const title = to.meta.title || '处方';
  document.title = title;
  next();
});
23、保证每次进入页面都是从头部开始
router.afterEach((to) => {
  window.scrollTo(0, 0);
  console.log(to);
});
24、iOSAndroid设备判断
if (/Android (\d+\.\d+)/.test(navigator.userAgent)) {
        window.mobile.isBackRecipe();
      } else {
        window.webkit.messageHandlers.isBackRecipe.postMessage('didload');
      }
25、全等判断===
路由传参过来都是字符串类型；
路由获取参数以及其他情况，都需要加默认值；
26、vue 缓存（方案针对性比较明显）
①配置缓存页面
activated() {
      if (!this.$route.meta.isKeepAlive) {
        this.init();
      }
    },
②处理不缓存的情况
beforeRouteLeave(to, from, next) {
      from.meta.isKeepAlive = true;
      next();
    },
27、项目开发完毕，花时间精简代码，这次手机开方项目乱七八糟的！！！
28、组件化不好。样式不好。目标应该是简单复用！！！
29、表单 虚拟键盘 遮挡 处理方案（Android配合，页面要推上去）
mounted() {
      this.id = this.$route.query.recipeId || '';
      this.getCode(this.qrcode);
      window.onresize = () => {
        this.screenHeight = document.documentElement.clientHeight;
      };
    },

watch: {
      screenHeight(val) {
        if (this.originHeight > val) {
          this.isOriginHei = false;
        } else {
          this.isOriginHei = true;
        }
      },
    },
30、下载PDF
①html2canvas：滚动形式渲染补全，应该设置height为实际渲染dom节点的大小。（HTML转canvas）
②jsPDF：a4大小以及分页操作（img转PDF）

1、返回promise对象（reject），然后同步 await 接收不到的。
原因：在await的时候没有接收错误信息
解决：try catch

2、打印分页：弹窗 position absolute 解决不分页问题

3、更新对象：this.$set(this.imgStatus, index, !this.imgStatus[index]);

4、差一点需要搞清楚！
watch：深度监听和普通的区别

5、清除files文件内容：this.refs.aceticAcid.value = '';以保证每次可以上传
computed：监听不到深层的数据变化；

6、vue绑监听事件，当组件销毁的时候，同样需要移除该事件。
destroyed() { this.$bus.$off('patientInfoChange'); },

5、import和require的区别；一个是引用提前/一个是执行到该句引用；具体详细看看；

3、vuex数据不同步，原因：新开页面和当前页面分属不同的线程；解决：localStorage同步数据；

elint:hasOwnProperty属性使用公共的对象，不要使用单一对象，存在重写的情况；

深度监听：组件之间传递对象；

vue引用图片：标签层，通过require；样式层，相对路径即可；
import 图片，处理图片缓存的问题。但是不是合理的解决方式。
说明：vue引用图片方式即可，若不行则采用下面的方式；

nw设置内核：移动端伪装；

缓存：如果数据会变动，则不需要缓存；省市区才适合；

flex:单个对象margin-left: auto;方可设置靠左靠右；

css属性：-webkit-app-region: no-drag; 插件el-dropdown加这个才生效nw开发；

知识点：https://www.youtube.com/watch?v=e-5obm1G_FY

7、vue，refs获取对象在mounted周期拿不到；
