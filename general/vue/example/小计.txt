test1的index.html案例――基础介绍的比较详尽

过滤器
可被用作一些常见的文本格式化；
过滤器函数总接受 表达式的值 作为第一个参数；


计算属性computed
计算属性和methods的区别：
计算属性：依赖的属性发生改变才会执行，否则使用缓存的数据；
methods：只要调用了就会执行；
计算属性和watch的区别：
计算属性：得到计算后的数据；
watch：得到计算后的数据；亦可以设置其他数据；


用key管理可复用的元素
默认情况，vue会复用已有元素；
只需要添加一个具有唯一值的key属性即可，不复用他们；



1、v-once
//补充：v-once 执行一次性地插值，当数据改变时，插值处的内容不会更新。注意：这会影响到该节点上所有的数据绑定；
//当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来；


2、v-bind
//v-bind 将节点属性和data下的属性绑定
//如果是布尔值的属性，为false的话则该属性会被移除


3、v-if 和 v-show
//v-if 控制节点的显示；组件销毁和重建；
//v-show 是简单地切换元素的css属性；组件总是会被渲染，只是简单地基于css进行切换；
//一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。


4、v-for
//v-for 渲染一个项目列表，通过绑定数组的数据
//v-for 还支持一个可选的第二个参数为当前项的索引：v-for="(item, index) in items"
//------ 以上为数组迭代--------
//对象迭代：v-for="(value, key, index) in object"
//整数迭代：v-for="n in 10"
//如果 v-for 和 v-if 处于同一节点，v-for 的优先级高（即先执行v-for）


5、v-on
//v-on 绑定一个事件监听器(监听什么事件则在html中写了)，通过它调用我们vue实例中定义的方法
//内联处理器方法： v-on:click="say('h1')" ;这样子就可以传参了;
//$event 特殊变量可以访问原生DOM事件：$event.preventDefault();
//事件修饰符：通过由点(.)表示的指令后缀来调用修饰符；.stop，阻止冒泡；.prevent，阻止默认事件；.capture，使用事件捕获模式（默认冒泡）；.selef，事件在当前元素本身时触发；.once，事件触发一次；


6、v-model
//v-model 实现表单输入和应该状态之间的双向绑定
//.key 是识别节点的一个通用机制 v-bind:key="id"
/* 修饰符
*  .lazy,在change事件中同步（默认input事件触发）<input v-model.lazy="msg">
*  .number 自动将用户的输入值转为Number类型（如果原值的转换结果为NaN则返回原值） v-model.number="age" type="number"
*  .trim 自动过滤用户输入的首尾空格 v-model.trim="msg"
* */


7、props
//组件 props 对应html中的 节点属性
//组件得放在实例之前，为了可以识别粗来。
//is属性 解决某些情况下自定义组件无效的情况：<tr is="my-row"></tr>


8、v-html
//v-html 输出真正的html


9、子组件
//子组件绑定了点击事件和自定义事件；
//流程：子组件触发点击事件，去触发自定义"increment"事件，从而触发父组件的incrementTotal方法；
//$on(eventName)监听事件；$emit(eventName)触发事件；
//.native，可以给组件绑定原生事件；v-on:click.native="doTheThing"；――――尝试的结果，无效！！！


10、
/*
* 编写可复用组件
* 1、props 允许外部环境传递数据给组件
* 2、events 允许从外部环境在组件内触发副作用
* 3、slots 允许外部环境奖额外的内容组合在组件中
* */








